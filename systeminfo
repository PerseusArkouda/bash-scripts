#!/bin/bash
# System Info Script
# Written by Perseus
# Can detect multiple CPUs / Disks / Network Interfaces
# Special thanks to Phorce1 for suggestions and testing
# Add --nocolor parameter to disable colored output.
# Add --nobenchmark parameter to disable benchmark.
# You can put it on /usr/local/bin and/or append this line to your ~/.bashrc: alias systeminfo="/path/to/systeminfo --nocolor --nobenchmark"
# Now supports installed packages count for distributions with apt, pacman, yum, snap and flatpak.

workdir="$HOME"

sysos=$(uname -s)
sysos2=$(uname --operating-system)
[ "$sysos" = "Darwin" ] && echo "macOS not supported yet. Exiting..." && exit 1

coloroutput=1
benchmark=1
args="$*"
grep -q nocolor <<<"$args" && coloroutput=0
grep -q nobenchmark <<<"$args" && benchmark=0

function main_func {

function cpu_count {
 sedline=1
 declare cpu_$count="$(grep "model name" $workdir/sysinfotmp | sed -n ${sedline}p | cut -d ":" -f2 | awk '$1=$1')"
 tmpcpu="cpu_$count"
 echo "${!tmpcpu}" >> "$workdir/tmpcpu"
 let count=count+1
 let sedline=sedline+1
}

function color_func {
 color="-e" && colorend="\e[0m" && titlecolor="\e[35m" && neutral="\e[36m" && normal="\e[32m" && warning="\e[33m" && critical="\e[31m"
 cpuloadint=$(printf '%.0f\n' "${syscpuload//%/}")
 [ $cpuloadint -lt 80 ] && cpuloadcolor="$normal"
 [ $cpuloadint -ge 80 ] && cpuloadcolor="$warning"
 [ $cpuloadint -ge 90 ] && cpuloadcolor="$critical"
 rampercent=$(( ($sysramtotalb - $sysramfreeb) * 100 / $sysramtotalb ))
 [ $rampercent -lt 80 ] && ramcolor="$normal"
 [ $rampercent -ge 80 ] && ramcolor="$warning"
 [ $rampercent -ge 90 ] && ramcolor="$critical"
 [ ! -z "$sysswaptotalb" ] && swappercent=$(( ($sysswaptotalb - $sysswapfreeb) * 100 / $sysswaptotalb ))
 [ ! -z "swappercent" ] && [ $swappercent -lt 80 ] && swapcolor="$normal"
 [ ! -z "swappercent" ] && [ $swappercent -ge 80 ] && swapcolor="$warning"
 [ ! -z "swappercent" ] && [ $swappercent -ge 90 ] && swapcolor="$critical"
 set color=1
}

function bytesToHuman {
    b=${1:-0}; d=''; s=0; S=(Bytes {K,M,G,T,P,E,Z,Y}B)
    while ((b > 1024)); do
        d="$(printf ".%02d" $((b % 1024 * 100 / 1024)))"
        b=$((b / 1024))
        let s++
    done
    echo "$b$d${S[$s]}"
}

printf "\r\033[KCollecting system info data... System Generic"
system=$(uname -snrm)
system=$(echo "${system/unknown/}" | awk '$1=$1')
sysuptime=$(uptime -p)
sysdate=$(date)
[ "$sysos2" != "Android" ] && sysmanufacturer=$(cat /sys/devices/virtual/dmi/id/sys_vendor) && sysmodel=$(cat /sys/devices/virtual/dmi/id/product_name) && syschipset=$(cat /sys/devices/virtual/dmi/id/board_name)
[ "$sysos2" = "Android" ] && [ -f "$workdir/termux-info" ] && sysmanufacturer=$(grep "Device manufacturer" "$workdir/termux-info" | cut -d ":" -f 2) && sysmodel=$(grep "Device model" "$workdir/termux-info" | cut -d ":" -f 2) && syschipset="" || sysmanufacturer="" && sysmodel="" && syschipset=""
printf "\r\033[KCollecting system info data... System OS"
[ "$sysos2" != "Android" ] && sysdistro=$(grep "PRETTY_NAME" /etc/os-release | cut -d '=' -f 2 | tr -d '"')
[ "$sysos2" != "Android" ] && [ -z "$sysdistro" ] && sysdistro=$(grep -w "NAME" /etc/os-release | cut -d '=' -f 2 | tr -d '"')
[ "$sysos2" != "Android" ] && sysdistrobuild=$(grep "BUILD_ID\|VERSION_ID" /etc/os-release | cut -d '=' -f 2 | tr -d '"') && [ -z "$sysdistrobuild" ] && sysdistrobuild="N/A"
[ "$sysos2" = "Android" ] && [ ! -z "$(whereis termux-info | awk '{print $2}')" ] && termux-info | sed ':a;N;$!ba;s/:\n/: /g' > "$workdir/termux-info"
[ -f "$workdir/termux-info" ] && sysdistrobuild=$(grep "Android version" "$workdir/termux-info" | cut -d ":" -f 2)
[ -f "$workdir/termux-info" ] && rm "$workdir/termux-info"
printf "\r\033[KCollecting system info data... Installed Packages"
[ ! -z "$(whereis pacman | awk '{print $2}')" ] && sysdistropackages="$(pacman -Q | wc -l) (pacman)" && pkgmgr=1
[ ! -z "$(whereis apt | awk '{print $2}')" ] && sysdistropackages="$(apt list --installed 2> /dev/null | wc -l) (apt)" && pkgmgr=1
[ ! -z "$(whereis emerge | awk '{print $2}')" ] && sysdistropackages="$(qlist -I | wc -l) (emerge)" && pkgmgr=1
[ -z "$(whereis pacman | awk '{print $2}')" ] && [ ! -z "$(whereis yum | awk '{print $2}')" ] && sysdistropackages="$(yum list installed | wc -l) (yum)" && pkgmgr=1
[ "$pkgmgr" = "1" ] && comma1=", "
[ ! -z "$(whereis snap | awk '{print $2}')" ] && sysdistrosnap=$(snap list | grep -v "Publisher" | wc -l) && sysdistropackages="${sysdistropackages}${comma1}${sysdistrosnap} (snap)" && comma2=", "
[ ! -z "$(whereis flatpak | awk '{print $2}')" ] && sysdistroflatpak=$(flatpak list | grep -v "Application ID" | wc -l) && sysdistropackages="${sysdistropackages}${comma2}${sysdistroflatpak} (flatpak)"
printf "\r\033[KCollecting system info data... Memory"
sysramusedb=$(free -b | grep "Mem" | awk '{print $3}')
sysramused=$(bytesToHuman "$sysramusedb")
sysramfreeb=$(free -b | grep "Mem" | awk '{print $7}')
sysramfree=$(bytesToHuman "$sysramfreeb")
sysramtotalb=$(free -b | grep "Mem" | awk '{print $2}')
sysramtotal=$(bytesToHuman "$sysramtotalb")
sysswapusedb=$(free -b | grep "Swap" | awk '{print $3}')
sysswapused=$(bytesToHuman "$sysswapusedb")
sysswapfreeb=$(free -b | grep "Swap" | awk '{print $4}')
sysswapfree=$(bytesToHuman "$sysswapfreeb")
sysswaptotalb=$(free -b | grep "Mem" | awk '{print $2}')
sysswaptotal=$(bytesToHuman "$sysswaptotalb")
printf "\r\033[KCollecting system info data... CPU"
cat /proc/cpuinfo > "$workdir/sysinfotmp"
syscpuphysical=$(grep "physical id" /proc/cpuinfo | awk '{print $4}')
count=0
touch "$workdir/tmpcpu"
[ -z "${syscpuphysical##*0*}" ] && cpu_count && [ -z "${syscpuphysical##*1*}" ] && cpu_count && [ -z "${syscpuphysical##*3*}" ] && cpu_count && cpu_count
syscpucores=$(grep "cpu cores" "$workdir/sysinfotmp" | awk '{print $4}')
syscpusiblings=$(grep "siblings" "$workdir/sysinfotmp" | awk '{print $3}')
[ "$syscpucores" != "$syscpusiblings" ] && syscpucores=$(( $(echo "$syscpucores" | wc -l) / count )) || syscpucores=$(echo "$syscpucores" | wc -l)
rm "$workdir/sysinfotmp"
syscpuload=$(awk '{u=$2+$4; t=$2+$4+$5; if (NR==1){u1=u; t1=t;} else print ($2+$4-u1) * 100 / (t-t1); }' <(grep 'cpu ' /proc/stat) <(sleep 1;grep 'cpu ' /proc/stat))
syscpuload=$(printf '%.2f' "$syscpuload")
syscpuload="${syscpuload}%"
printf "\r\033[KCollecting system info data... GPU"
lspci -k | grep -A 2 -E "VGA" > "$workdir/tmpgpu"
sysgpuid=$(grep "VGA" "$workdir/tmpgpu" | cut -d " " -f 1)
sysgpudriver=$(grep "Kernel" "$workdir/tmpgpu" | cut -d ":" -f 2 | awk '$1=$1' | head -1)
sysgpu=$(grep "Subsystem" "$workdir/tmpgpu" | cut -d ":" -f 2 | awk '$1=$1')
rm "$workdir/tmpgpu"
sysgpuvram=$(dmesg | grep -o -P -i "(?<=vram:).*(?=M 0x)" | awk '$1=$1')
printf "\r\033[KCollecting system info data... Disks"
df -h > "$workdir/diskstmp"
disk1="sd"
disk2="sr"
disk3="md"
disk4="nvme"
disk5="vd"
count=1
while true; do
 diskcount="disk${count}"
 declare "dev${count}=$(grep "/dev/${!diskcount}" "$workdir/diskstmp" | awk '{print $1}' | sed -n ${count}p)"
 declare "diskmount${count}=$(grep "/dev/${!diskcount}" "$workdir/diskstmp" | cut -d '%' -f 2 | sed -n ${count}p)"
 declare "totalsize${count}=$(grep "/dev/${!diskcount}" "$workdir/diskstmp" | awk '{print $2}' | sed -n ${count}p)"
 declare "freespace${count}=$(grep "/dev/${!diskcount}" "$workdir/diskstmp" | awk '{print $4}' | sed -n ${count}p)"
 let count=count+1
 [ $count -ge 20 ] && disks=$count && break
done
rm "$workdir/diskstmp"
printf "\r\033[KCollecting system info data... Network"
sysnetworkinterfaces=$(ip link | grep " UP " | awk '{print $2}' | sed 's/://g')
sysnetworkinterfacescount=$(echo "$sysnetworkinterfaces" | wc -l)
ethcount=1
while [ $ethcount -le $sysnetworkinterfacescount ]; do
 sysnetworkinterface=$(echo "$sysnetworkinterfaces" | sed -n ${ethcount}p)
 eval sysethinterface${ethcount}="$sysnetworkinterface"
 eval sysethrx${ethcount}=$(ip -h -s link show dev "$sysnetworkinterface" 2> /dev/null | sed -n 4p | awk '{print $1}')
 eval sysethtx${ethcount}=$(ip -h -s link show dev "$sysnetworkinterface" 2> /dev/null | sed -n 6p | awk '{print $1}')
 let ethcount=ethcount+1
done
printf "\r\033[KCollecting system info data... Internet"
sysconnection=$(timeout 3 ping -c 1 google.com | sed -n 2p | awk '{print $8}' | cut -d "=" -f 2)

[ "$coloroutput" = "1" ] && color_func
printf "\r\033[K"

echo $color "[${titlecolor}SYSTEM INFO${colorend}]"
[ ! -z "$system" ] && echo $color "[${titlecolor}SYS${colorend}]: ${neutral}${system}${colorend}"
[ ! -z "$sysdistropackages" ] && sysdistropackages=" - [${titlecolor}INSTALLED PKGS${colorend}]: ${neutral}${sysdistropackages}${colorend}"
[ ! -z "$sysdistro" ] && echo $color "[${titlecolor}DISTRO${colorend}]: ${neutral}${sysdistro}${colorend} - [${titlecolor}BUILD${colorend}]: ${neutral}${sysdistrobuild}${colorend}${sysdistropackages}"
[ ! -z "$sysmanufacturer" ] && echo $color "[${titlecolor}MODEL${colorend}]: ${neutral}${sysmanufacturer} ${sysmodel}${colorend} - [${titlecolor}CHIPSET${colorend}]: ${neutral}${syschipset}${colorend}"
i=0
while read line ; do
 echo $color "[${titlecolor}CPU${i}${colorend}]: ${neutral}${line}${colorend}"
 let i=i+1
done < $workdir/tmpcpu
rm $workdir/tmpcpu
[ ! -z "$syscpucores" ] && echo $color "[${titlecolor}CPU CORES${colorend}]: ${neutral}${syscpucores}${colorend} - [${titlecolor}CPU LOAD${colorend}]: ${cpuloadcolor}${syscpuload}${colorend}"
[ ! -z "$sysgpuvram" ] && sysgpuvram=" [${titlecolor}VRAM${colorend}]: ${neutral}${sysgpuvram}MB${colorend} -"
[ ! -z "$sysgpu" ] && echo $color "[${titlecolor}GPU${colorend}]: ${neutral}${sysgpu}${colorend} -${sysgpuvram} [${titlecolor}DRIVER${colorend}]: ${neutral}${sysgpudriver}${colorend}"
# Looking for methods to get detailed RAM info without sudo or non core programs.
#[ ! -z "$sysramtype" ] && echo $color "[${titlecolor}RAM TYPE${colorend}]: ${neutral}${sysramtype}${colorend} - [${titlecolor}RAM SPEED${colorend}]: ${neutral}${sysramspeed}${colorend}"
echo $color "[${titlecolor}TOTAL RAM${colorend}]: ${neutral}${sysramtotal}${colorend} - [${titlecolor}USED RAM${colorend}]: ${neutral}${sysramused}${colorend} - [${titlecolor}AVAIL RAM${colorend}]: ${ramcolor}${sysramfree}${colorend}"
[ ! -z "$sysswapfree" ] && echo $color "[${titlecolor}TOTAL SWAP${colorend}]: ${neutral}${sysswaptotal}${colorend} - [${titlecolor}USED SWAP${colorend}]: ${neutral}${sysswapused}${colorend} - [${titlecolor}FREE SWAP${colorend}]: ${swapcolor}${sysswapfree}${colorend}"
i=1
while [ $i -le $disks ]; do
 dev="dev${i}"
 diskmount="diskmount${i}"
 totalsize="totalsize${i}"
 freespace="freespace${i}"
 [ ! -z "$color" ] &&  [ ! -z "${!totalsize}" ] && diskpercent=$(( ($(printf '%.0f\n' "${!totalsize: : -1}") - $(printf '%.0f\n' "${!freespace: : -1}" )) * 100 / $(printf '%.0f\n' "${!totalsize: : -1}") ))
 [ ! -z "$diskpercent" ] && [ $diskpercent -lt 80 ] && diskcolor="$normal"
 [ ! -z "$diskpercent" ] && [ $diskpercent -ge 80 ] && diskcolor="$warning"
 [ ! -z "$diskpercent" ] && [ $diskpercent -ge 90 ] && diskcolor="$critical"
 [ ! -z "${!dev}" ] && [ ! -z "${!dev##*loop*}" ] && echo $color "[${titlecolor}STORAGE DEVICE${colorend}]: ${neutral}${!dev}${colorend} - [${titlecolor}TOTAL SIZE${colorend}]: ${neutral}${!totalsize}B${colorend} - [${titlecolor}FREE SPACE${colorend}]: ${diskcolor}${!freespace}B${colorend} - [${titlecolor}MOUNTPOINT${colorend}]:${neutral}${!diskmount}${colorend}"
 let i=i+1
done
i=1
while [ $i -le $ethcount ]; do
 eval sysethrx=\$"sysethrx${i}"
 eval sysethtx=\$"sysethtx${i}"
 eval sysethinterface=\$"sysethinterface${i}"
 [ ! -z "$sysethinterface" ] && [ ! -z "$sysethrx" ] && echo $color "[${titlecolor}NETWORK INTERFACE${colorend}]: ${neutral}${sysethinterface}${colorend} - [${titlecolor}RECEIVED${colorend}]: ${neutral}${sysethrx}B${colorend} - [${titlecolor}SENT${colorend}]: ${neutral}${sysethtx}B${colorend}"
 let i=i+1
done
[ ! -z "$sysconnection" ] && sysconnection="${sysconnection}ms on Google ping" || sysconnection="Offline"
echo $color "[${titlecolor}INTERNET${colorend}]: ${neutral}${sysconnection}${colorend}"
echo $color "[${titlecolor}UPTIME${colorend}]: ${neutral}System is ${sysuptime}${colorend}"
echo $color "[${titlecolor}DATE${colorend}]: ${neutral}${sysdate}${colorend}"
}

for i in main_func; do
 printf "\r\033[KCollecting system info data..."
 [ "$benchmark" = "0" ] && main_func && exit 0
 { time -p main_func ; } 2> "$workdir/benchmarktmp"
 benchreal=$(grep "real" "$workdir/benchmarktmp" | cut -d " " -f 2)
 benchuser=$(grep "user" "$workdir/benchmarktmp" | cut -d " " -f 2)
 benchsys=$(grep "sys" "$workdir/benchmarktmp" | cut -d " " -f 2)
 echo $color "[${titlecolor}BENCHMARK EXEC TIME(SEC)${colorend}]: ${neutral}${benchreal}${colorend} - [${titlecolor}EXEC USER TIME${colorend}]: ${neutral}${benchuser}${colorend} - [${titlecolor}EXEC SYS TIME${colorend}]: ${neutral}${benchsys}${colorend}"
 rm "$workdir/benchmarktmp"
done
