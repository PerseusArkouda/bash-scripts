#!/bin/bash
# Backup tool to get local incremental backups
# Requires rsync.
# The source directory will be copied as is and is not required to include it's name to the destination.
# Example: source: /home/john/mysource destination: /mnt/backupdisk (mysource directory will be saved into your backupdisk directory)
# Accepts parameter: -new (for new backup plans). -reset (delete all current backup plans. Not the backups.)
# For automation add an entry to your crontab like: @daily /path/to/baktool
# In case of errors it will generate an error log in your $workdir directory. Always use dry_flag=--dry-run for testing!!

# Change the workdir path if you don't want to use the current directory.
# In case you use crontab for automation better use the full path to the script directory or else crontab will use your home directory.
workdir=$(pwd)
me=$(basename "$0")
workdir="$workdir/.${me}"
[ ! -d "$workdir" ] && mkdir "$workdir"
lockfile="$workdir/rsyncjob.lock"
config="$workdir/${me}.conf"

# Special config. Don't edit if not sure.
# verbose mode. verbose_flag="" to disable.
verbose_flag="v"
# rsync flags. man rsync for more info.
rsync_flags="-aAHX"
# deletes the files or directories on destination if they are deleted on source. delete_flag="--delete" to enable.
delete_flag=""
# exludes files or directories from backup. See the baktool-exclude-example.txt from repository.
# Enable it like that if you have the file in place: excludefile="${workdir}/baktool-exclude-example.txt"
excludefile=""
# dry flag simulates a backup without actually proceeding if not sure about the result. dry_flag="" to disable.
dry_flag="--dry-run"
# system backup requires sudo.
# Enable root with root="sudo" or root="sudo -S" if you have set passwordless sudo privileges with sudo visudo.
root=""

function config_func {
 echo
 read -rp "Enter full path of the source directory you want to backup: " "source"
 [ -z "$source" ] && echo "Error. Source directory cannot be empty." && exit 1
 read -rp "Enter full path to the destination directory you want to save the backup: " "destination"
 [ -z "$destination" ] && echo "Error. Destination directory cannot be empty." && exit 1
 echo "You will get a backup from: $source" ; echo "And it will be saved to: $destination"
 read -rp "Is it correct? (Y/n): " "confirm"
 [ "$confirm" == "n" ] || [ "$confirm" == "N" ] && echo "Aborted. Exiting." && exit 0
 [ ! -d "$source" ] && echo "Error. Source directory cannot be found. Adding plan aborted." && exit 1
 let countplans=countplans+1
 echo "Source_Plan${countplans}: $source" >> "$config"
 echo "Destination_Plan${countplans}: $destination" >> "$config"
 echo "Config saved."
 echo
 read -rp "Run backup(s) now? (Y/n): " "runconfirm"
 [ "$runconfirm" == "n" ] || [ "$runconfirm" == "N" ] && echo "Aborted. Exiting." && exit 0
}

function start_backup {
 [ -f "$excludefile" ] && excludes=$(cat "$excludefile" | tr '\n' ',') && exclude_flag="--exclude={${excludes%,*}}"
 [ ! -f "$lockfile" ] && touch "$lockfile" || (echo "An rsync job is already running. Execution aborted. Exiting." && exit 1)
 echo
 echo "Starting backup of Plan${count}:"
 false
 eval "${root}" rsync "${dry_flag}" "${rsync_flags}${verbose_mode}" "${delete_flag}" "${exclude_flag}" "${srcplan}" "${dstplan}"
 errorlevel="$?"
 [ -f "$lockfile" ] && rm "$lockfile"
 if [ $errorlevel -eq 0 ]; then
  echo "Backup of Plan${count} has been finished." && echo "$(date) - Backup of Plan${count} finished." >> ${workdir}/${me}.log
 else
  echo "Error. Backup of Plan${count} failed!" && echo "$(date) - Backup of Plan${count} failed!" >> ${workdir}/${me}.log
  exit 1
 fi
 sleep 5
}

[ "$1" == "-reset" ] && rm "$config" && echo "Current backup plans are deleted. Not the backups." && exit 0

[ ! -z "$dry_flag" ] && echo "*** dry_flag is enabled. $me with dry_flag set to --dry-run will just simulate the backup without actually copying anything." && echo "*** Disable dry_flag once you are sure your backup plans are working correctly." && echo

countplans=0
[ -f "$config" ] && countplans=$(grep "Source_Plan" "$config" | wc -l) && [ $countplans -lt 1 ] && countplans=0 && rm "$config"

[ ! -f "$config" ] && echo "$me - local incremental backup tool using rsync" && echo && echo "This is the first run. Create a new backup plan." && echo "# Auto generated config file from $me script." > "$config" && config_func

[ "$1" == "-new" ] && echo "Add a new backup plan." && config_func

count=1
while [ $count -le $countplans ]; do
 srcplan=$(grep "Source_Plan${count}" "$config" | awk '{print $2}')
 [ -z "$srcplan" ] && skip=1 || skip=0
 dstplan=$(grep "Destination_Plan${count}" "$config" | awk '{print $2}')
 [ ! -d "$srcplan" ] && echo "Error. Source directory cannot be found. Backup aborted." && echo "You can fix manually by editing Source_Plan${count} path in: $config" && exit 1
 [ $skip -eq 0 ] && start_backup
 echo
 let count=count+1
done

echo
echo "All backup plans are finished."
