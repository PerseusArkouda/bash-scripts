#!/bin/bash
# Script to perform basic maintenance on Linux systems.
# While it is considered safe, you are however encouraged to review the commands before you execute this script.
# Recommended to run it about once a week.

# Enable or Disable items
enable_packages=1
enable_systemd=1
enable_trim=1
enable_links=1
enable_sizes=1
enable_dmesg=1


#---- NO NEED TO EDIT ANYTHING BELOW ----

# Output messages function
output() {
 [ "$1" = "error" ] && echo "$(echo -e '\n\r')[maintenance] ERROR: $msg Exiting." && exit 1
 [ "$1" = "ok" ] && msg="Done." || enter=1
 echo "$(echo -e '\n\r')[maintenance] $msg"
 [ ! -z "$enter" ] && read -rp "(Press ENTER to continue)" && enter=
 echo
}

# Checking if program is installed function
chk() {
 [ -z "$(which $1 2>/dev/null)" ] && msg="$1 not found installed. Install it or disable it." && output error || echo >/dev/null
}

# Functions to execute maintenance commands for the detected package managers
apt() {
 sudo apt update && sudo apt upgrade && sudo apt install -f && sudo apt autoremove && sudo apt clean && sudo apt autoclean
}

pacman() {
 sudo pacman -Syu && sudo pacman -Qen
}

yum() {
 sudo yum check-update && sudo yum clean all
}

zypper() {
 sudo zypper ref && sudo zypper update && sudo zypper packages --unneeded && sudo zypper packages --orphaned
}

apk() {
 sudo apk -U upgrade && sudo apk cache -v sync 2>/dev/null
}

emerge() {
 sudo emerge --sync && sudo emerge -uUDav @world --with-bdeps=y --keep-going && \
  emerge @module-rebuild && sudo emerge --ask --depclean && sudo emerge -av @preserved-rebuild && \
  sudo etc-update && sudo elogv
}

xbps() {
 chk xcheckrestart && \
 sudo xbps-install -Su && xcheckrestart && xlocate -S
}

# Detecting package managers and calls the appropriate functions
packagesfunc() {
 # If you want to skip a package manager remove item from the array below
 pkgmgrs=( "apt" "pacman" "yum" "zypper" "apk" "emerge" "xbps" )
 for i in "${pkgmgrs[@]}"; do
  [ ! -z "$(which $i 2>/dev/null)" ] && pkgmgr="$i" && msg="Performing $pkgmgr maintenance..." && output && \
  $pkgmgr && output ok
 done
}

# Cleaning systemd logs, reporting failed services and reporting errors from /var/log and systemd
systemdfunc() {
 msg="Cleaning systemd logs older than 10 days..." && output && \
  sudo journalctl --vacuum-time=10d && output ok
  msg="Reporting systemd errors (inspect manually)..." && output && \
  journalctl -p 3 -xb && output ok
 msg="Reporting failed services (inspect manually)..." && output && \
  sudo systemctl list-units --failed && output ok
}

# Trimming all available SSD disks defined in /etc/fstab
trimfunc() {
 [ "$osdetect" = "alpine" ] && msg="Alpine doesn't support --all parameter for fstrim. \
Change --all to your actual device or disable trim." && output error
 msg="Trimming all fstab defined and supported SSDs..." && output && \
  sudo fstrim --all --verbose && output ok
}

# Reporting broken links
linksfunc() {
 msg="Reporting broken links in your home dir (inspect manually)..." && output && \
  find ~ -xtype l -print 2>/dev/null | more && output ok
}

# Listing the 20 largest dirs and files in your home dir
sizesfunc() {
 msg="Listing the 20 largest dirs and files in your home dir (inspect manually)..." && output && \
  du -ah -d1 ~ 2>/dev/null | sort -hr 2>/dev/null | head -20 && output ok
}

# Reporting dmesg errors
dmesgfunc() {
 msg="Reporting dmesg errors and warnings (inspect manually)..." && output && \
  if [ ! -z "$(dmesg --level=err,warn 2>/dev/null)" ]; then
   dmesg --level=err,warn 2>/dev/null | more
  else
   dmesg | grep "error\|warning" | more
 fi
 output ok
}

# Beginning
echo "$(echo -e '\n\r')Starting maintenance$(echo -e '\n\r')"
chk sudo && sudo echo

# Detect OS
osdetect=$(awk -F'=' '/^ID=/ {print $2}' /etc/os-release)

# Check if item is enabled, check if it's installed (when needed) and call it's function
[ "$enable_packages" = 1 ] && packagesfunc
[ "$enable_systemd" = 1 ] && chk systemctl && systemdfunc
[ "$enable_trim" = 1 ] && chk fstrim && trimfunc
[ "$enable_links" = 1 ] && linksfunc
[ "$enable_sizes" = 1 ] && sizesfunc
[ "$enable_dmesg" = 1 ] && dmesgfunc

echo "maintenance Finished!"
